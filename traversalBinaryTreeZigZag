//zigzagbt.java
import java.util.ArrayDeque;
import java.util.Queue;
import java.util.Stack;
class BTree{
    int data;
    BTree left =null;
    BTree right = null;
    BTree(int data ){
        this.data = data;
    };
}

public class zigzagbt{

    public static int powinc(int level){
        return(level*2);
    }

    public static void levelorder(BTree root){
        Queue<BTree> q1 = new ArrayDeque<BTree>();
        BTree empti = new BTree(-999999999);
        q1.add(root);
        BTree temp;
        int level =2;
        int count =1;
        Stack<Integer> st1 = new Stack<Integer>();
        boolean check=false;
        while(!q1.isEmpty()||!st1.isEmpty()){
            
           
            if(!check&&q1.peek()!=empti){
          // System.err.println("in");
                while(!st1.isEmpty()){
                    System.out.println("out "+st1.pop());
                }
                if(q1.isEmpty()){
                    break;
                }
            temp = q1.remove();
            System.out.println("out "+temp.data);
            if(temp.left!=null){
                q1.add(temp.left);
            }
            else{
                q1.add(empti);
            }

            if(temp.right!=null){
                q1.add(temp.right);    
            }
            else{
                q1.add(empti);
            }
            count++;
            
            
        }
        else if(check&&q1.peek()!=empti){
            //System.err.println("out");
            temp = q1.remove();
           //System.out.println("stack data entered "+temp.data);
            
            st1.add(temp.data);
            //System.out.println(temp.data);
            if(temp.left!=null){
                q1.add(temp.left);
              //  System.err.println("temp left"+ temp.left.data);
            }

            else{
                q1.add(empti);
            }
            if(temp.right!=null){
               //System.out.println("right "+temp.right.data);
                q1.add(temp.right);
            }
            else{
                q1.add(empti);
            }
            
            count++;
        }   
        while(q1.peek()==empti){
            count++;
            q1.remove();
         //   System.out.println("Peek"+q1.peek().data);
        }
       //System.err.println("count "+count);
       //System.err.println("level "+level);
        if(count >=level||q1.isEmpty()){
            check=!check;
      //      System.err.println("check here "+check);
            level = powinc(level);
        }

        }
    }

    public static void main(String[] args){
        //creating sample tree
        BTree start = new BTree(10);
        
        BTree one = new BTree(50);
        start.left=one;
        
        BTree two = new BTree(70);
        start.left.left=two;
        
        BTree three = new BTree(90);
        start.left.right=three;
        
        BTree four = new BTree(60);
        start.right=four;
        
        BTree five = new BTree(20);
        start.right.left=five;

        BTree six = new BTree(30);
        start.right.left.right=six;


        BTree seven = new BTree(25);
        start.left.left.left=seven;

        BTree eight = new BTree(26);
        start.left.left.right=eight;

        BTree nine = new BTree(29);
        start.left.right.left=nine;
//my tree created
        levelorder(start);
    }
}
